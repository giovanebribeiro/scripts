#!/bin/bash

##
# File: backup
# Author: Giovane Boaviagem <giovanebribeiro@gmail.com>
# Since: 21/02/2013
#
# * This file is free software: you may copy, redistribute and/or modify it  
# * under the terms of the GNU General Public License as published by the  
# * Free Software Foundation, either version 2 of the License, or (at your  
# * option) any later version.  
# * 
# * This file is distributed in the hope that it will be useful, but  
# * WITHOUT ANY WARRANTY; without even the implied warranty of  
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  
# * General Public License for more details.  
# * 
# * You should have received a copy of the GNU General Public License  
# * along with this program.  If not, see <http://www.gnu.org/licenses/>.  
# 
# Usage:
#	backup <config_number_id>
##

##
# CONFIG VARIABLES
# The set of array elements defines a possible configuration. 
# The arrays are defined below:
##
src[0]=/var/log
dst[0]=/mnt/hd/backup
file[0]=logs.tar.gz
type[0]=tar
send_mail[0]=true
mail_addr[0]=giovanebribeiro@gmail.com


## 
# DO NOT EDIT BELOW THIS LINE!!
##
mail_content="/tmp/backup.mail"
DATETAG=$(date +%d-%m-%Y)
LOGTAG="BACKUP_GIOZ"

log(){
	logger -t $LOGTAG -s "*** $1"
	echo "$1" >> $mail_content 
}

sending_mail(){
	if [ ! -f "/usr/bin/mailx" ] ; then
		log "You must have the heirloom-mailx package!!"
		return 1
	fi

	mailx  -s "[BACKUP] $HOSTNAME - Status report" $1 < $mail_content
	rm $mail_content
}


if [ ! "$(whoami)" == "root" ] ; then
	logger -s -t $LOGTAG "This script must be executed like root"
	exit
fi

CONF=$1
bkp_dest=${dst[$CONF]}

log "Creating the parent folder for backup file..."
if [ ! -d $bkp_dest ] ; then
	mkdir -p $bkp_dest
fi
log "Success."

log "Putting this process with low priority..."
ionice -c 3 -p $$
renice +12 -p $$
log "Success."

log "Creating the backup file..."
bkp_type=${type[$CONF]}
bkp_src=${src[$CONF]}
bkp_filename=${file[$CONF]}
final_filename=$bkp_dest/$DATETAG-$bkp_filename
log "Final filename: $final_filename"
START=$(date +%s)
case "$bkp_type" in
	tar)
		tar czf $final_filename $bkp_src/
	;;
	img)
		dd if=$bkp_src > $final_filename
	;;
	*)
		log "Unknown option for backup type!!" 
	;;
esac
FINISH=$(date +%s)
log "Success."

log "Backup completed in $(( ($FINISH-$START) / 60 )) minutes, $(( ($FINISH-START) % 60 )) seconds!"

$bkp_send_mail=${send_mail[$CONF]}
if [ "$bkp_send_mail" == "true" ] ; then
	log "Sending the report e-mail..."
	mail_addr=${mail_addr[$CONF]}
	sending_mail $mail_addr
	log "Success"
elif [ "$bkp_send_mail" == "false" ] ; then
	log "Send e-mail option: false."
else
	log "Unknown option!! to send e-mail"
fi



# backup_time_machine()
# @param $1: Parent folder for backup
#
#backup_time_machine(){
#	echo "*** Starting backup using rsync..."
#	DATETAG=$(date +%d-%m-%Y)		
#	
#	BACKUP_PARENT_FOLDER="$1"
#	SRC="/*"
#	SNAP="$BACKUP_PARENT_FOLDER/latest"	
#	BKP_FOLDER="$BACKUP_PARENT_FOLDER/$DATETAG"
#	OPTS="-aAXv --link-dest=$SNAP --exclude=/dev --exclude=/proc --exclude=/sys --exclude=/tmp --exclude=/run --exclude=/mnt --exclude=/media --exclude=/lost+found --exclude=/home/*/.gvfs"
#	
#	
#	
#	# if the rsync is not installed, exit
#	if [ ! -f /usr/bin/rsync ] ; then
#		log "rsync must be installed on the system\n"
#		return 1
#	fi
#	
#	
#	# run this process with low priority
#	ionice -c 3 -p $$
#	renice +12 -p $$
#	# create the folder if don't exist:
#	if [ ! -d "$BACKUP_PARENT_FOLDER" ] ; then
#		mkdir -p $BACKUP_PARENT_FOLDER
#	fi
#
#	#sync
#	log "**** Backup:"
#	START=$(date +%s)
#	rsync $OPTS $SRC $BKP_FOLDER
#	rm -f $SNAP
#	ln -s $BKP_FOLDER $SNAP	
#	FINISH=$(date +%s)
#	
#	log "** Backup of $DATETAG: $(( ($FINISH-$START) / 60  )) minutes, $((  ($FINISH-$START) % 60 )) seconds\n"
#}

##
# restore()
# @param $1 Folder for restore
##
#restore_time_machine(){		
#	# if the rsync is not installed, exit
#	if [ ! -f /usr/bin/rsync ] ; then
#		log "restore_time_machine" "rsync must be installed on the system"
#		exit 1
#	fi
#	
#	log "restore" "Not implemented yet."
#}
