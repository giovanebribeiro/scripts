#!/bin/bash
#
##
# File: backup_raspberry
# Description: Utils for Raspberry Pi.
# Date: 16/01/2014
##
#
#
#
#
# Variables
OPTION=$1
OPTION_2=$2
#
#
#
##
# Configs
##
VERSION="2.0"
EXT_HD_LOCATION=/mnt
TEMP=$(readlink -f $0)
PUSHOVER_DIR=$(dirname $TEMP)
TAG="RASPBERRY_UTILS"
HOSTNAME=`hostname`
#
# RSync options
#
# -r = recursive into directories
# -l = copy symlinks as symlinks
# -t = preserve modification times
# -W = copy files whole (w/o delta-xfer algorithm)
# -D = preserve device files
# -E = preserve executability
# -g = preserve group
# -o = preserve owner
# -p = preserve permissions
#
#
RSYNC_OPTIONS="--force -rltWDEgop"
DST_ROOT=$EXT_HD_LOCATION/backup/raspberry
#
#
#
if [ `id -u` != 0 ]
then
logger -t "$TAG" -s "This script must be run as root."
exit 1
fi
#
#
#
#
#
#
#
#
#
#
#
version(){
echo "Raspberry Utils"
echo "Author: Giovane Boaviagem Ribeiro (giovanebribeiro@gmail.com)"
echo "Version: $VERSION"
}
#
#
#
#
#
#
#
#
#
#
_help(){
case $OPTION_2 in
v) 
echo "The script version."
;;
b)
echo "Creates a backup in snapshot-tree. Only available in Arch Linux ARM."
echo "If the file changes 20 times, create a hardlink."
echo "Steps: "
echo "1 - Stopping the services"
echo "2 - Executing the backup"
echo "3 - Checking if have enough changes to create a hardlink"
echo "4 - Restaring the services"
;;
r)
echo "Restore the Arch Linux ARM system."
echo "Steps:"
echo "1 - Installing the needed packages (rsync, ntfs-3g, etc)"
echo "2 - Mounting the external hard drive"
echo "3 - Backup options (set the date backup or latest backup)"
echo "4 - Execute the rsync"
echo "5 - System upgrade"
echo "6 - Starting the services"
;;
s)
echo "Systemd services management."
echo "The services are listed in /etc/services.conf file (one service per line)."
echo "Lines started with '#' are ignored."
echo "If the file don't exist, the file are created automatically."
echo ""
echo "Usage: $0 s [start|stop|status|watchdog]"
echo ""
echo "Internal options:"
echo "start = Start the services"
echo "stop = Stop the services"
echo "status = Show the services status"
echo "watchdog = Restart the stopped services."
;;
*)
echo "Raspberry Utils (For Arch Linux ARM only)"
echo ""
echo "Usage: $0 [option]"
echo "See $0 h [option] for details"
echo ""
echo "Available options:"
echo ""
echo "h = Print this help"
echo "v = Print the version"
echo "b = Backup the raspberry (Using rsync)"
echo "r = Restore the raspberry (Using rsync)"
echo "s = Services management"
;;
esac
}
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
backup(){

if ! rsync --version > /dev/null
then
logger -t $TAG -s "This script needs rsync to run properly."
exit 0
fi


DST="$DST_ROOT/latest"
MINCHANGES=20

bTAG="$TAG:BACKUP"
MSG1="::: Starting the backup procedures"
MSG2="::: Backup finished"

logger -t $bTAG -s $MSG1
INIT=$(date +"%s")

logger -t $bTAG -s "::: 1 - Stopping the services"
services "stop"

if [ ! -d $DST ]
then
mkdir -p $DST
fi

logger -t $bTAG -s "::: 2 - Executing the backup"
rsync $RSYNC_OPTIONS \
      --delete \
      --exclude '/dev' \
      --exclude '/media' \
      --exclude '/mnt' \
      --exclude '/proc' \
      --exclude '/run' \
      --exclude '/sys' \
      --exclude '/tmp' \
      --exclude '/lost\+found' \
     / $DST >> $DST_ROOT/rsync.log
 
logger -t $TAG -s "::: 3 - Checking if have enough changes to create a hardlink."
if [ -e $DST_ROOT/rsync.log ]
then
COUNT=$( wc -l $DST_ROOT/rsync.log | cut -d" " -f1 )
if [ $COUNT -gt $MINCHANGES ]
then
NOW=$(date +%d-%m-%Y)
if [ ! -e $DST_ROOT/$NOW ]
then
cp -al $DST $DST_ROOT/$NOW
chmod u+w $DST_ROOT/$NOW
mv $DST_ROOT/rsync.log $DST_ROOT/$NOW/rsync.log
chmod u-w $DST_ROOT/$NOW
fi
fi
fi

FINISH=$(date +"%s")
DIFF=$(($FINISH-$INIT))

logger -t $bTAG -s "::: 4 - Restarting the services"
services "start"

echo "$MSG2 (Execution time: $(($DIFF / 60)) minutes and $(($DIFF % 60)) seconds" >> ~/backup.temp
echo `/bin/bash $PUSHOVER_DIR/services status` >> ~/backup.temp
MSG3=`cat ~/backup.temp`
rm ~/backup.temp
logger -t $bTAG -s $MSG3	
/bin/bash $PUSHOVER_DIR/pushover sd cotoco "Backup" "$MSG3"
}
#
#
#
#
#
#
#
#
#
#
#
#
restore(){
INIT=$(date +"%s")
rTAG="$TAG:RESTORE"
logger -t $rTAG -s "::: Starting the restore procedures"
sleep 3
logger -t $rTAG -s "::: 1 - Installing the needed packages..."
pacman -Sy rsync ntfs-3g --noconfirm
logger -t $rTAG -s "::: 2 - Mounting the External Hard Drive (located in /dev/sda1)..."
mount -t ntfs-3g /dev/sda1 /mnt
if [ ! -d $DST_ROOT ] 
then
logger -t $rTAG -s "The backup folder ($DST_ROOT) doesn't exist. Nothing to do."
exit 1
fi

logger -t $rTAG -s "::: 3 - Backup options:"
echo "Content of $DST_ROOT: "`ls $DST_ROOT`
echo -n "Set the date for backup (dd-MM-yyyy). [leave empty for latest backup]. The date is the folder name: "
read DATE

TAG="$DATE"
if [ -z $DATE ]
then
TAG="latest"
else
check=$(echo $TAG | sed -e '/[0-9]{2}-[0-9]{2}-[0-9]{4}')
if [[ -z $check ]]
then
logger -t $rTAG -s "$$DATE is the right format"
else
logger -t $rTAG -s "The date isn't in the right format. Please use dd-MM-yyyy"
exit 1
fi
fi
SRC=$DST_ROOT/$TAG
logger -t $rTAG -s "::: 4 - Starting the restore (src folder: $SRC)"
rsync $RSYNC_OPTIONS $SRC /
FINISH=$(date +"%s")
DIFF=$(($FINISH-$INIT))

logger -t $rTAG -s "::: 5 - System upgrade"
pacman -Syu --noconfirm

logger -t $bTAG -s "::: 6 - Starting the services"
services "start"

FINISH=$(date +"%s")
DIFF=$(($FINISH-$INIT))
echo "::: Restore finished (Execution time: $(($DIFF / 60)) minutes and $(($DIFF % 60)) seconds"
}
#
#
#
#
#
#
#
#
#
#
#
#
services(){
FILECONF=/etc/services.conf

#
if [ ! -z $1 ]
then
OPTION_2=$1
fi

#
if [ ! -f $FILECONF ] ; then
echo "##" >> $FILECONF
echo "# File: /etc/services.conf" >> $FILECONF
echo "# List of services controled by script 'services' " >> $FILECONF
echo "# Must be one service per line" >> $FILECONF
echo "# All the services are controlled by 'systemd'" >> $FILECONF
echo "# Lines preceded by '#' are ignored" >> $FILECONF
echo "##" >> $FILECONF
echo "" >> $FILECONF
echo "#cronie" >> $FILECONF
echo "#transmission" >> $FILECONF
 
echo "File $FILECONF created. Edit this file to use this script in future."
exit 1
fi

#
systemctl daemon-reload

#
case $OPTION_2 in
start)
while read line
do
if [ ! ${line:0:1} == '#' ] ; then
echo "Starting service: $line"
systemctl start $line
fi
done < $FILECONF
;;
stop)
while read line
do
if [ ! ${line:0:1} == '#' ] ; then
echo "Terminating service: $line"
systemctl stop $line
fi
done < $FILECONF
;;
status)
while read line
do
if [ ! ${line:0:1} == '#' ] ; then
RESP=`systemctl status $line | grep -i -m 1 "Active"`
echo "### $line - " $RESP >> ~/temp
fi
done < $FILECONF
cat ~/temp
rm ~/temp
;;
watchdog)
while read line
do
if [ ! ${line:0:1} == '#' ] ; then
RESP=`systemctl status $line | grep -i -m 1 "\(running\)"`
if [ "$RESP" == "" ] ; then
echo "Restarting service $line"
systemctl restart $line
fi
fi
done < $FILECONF
;;
esac
}
#
#
#
#
case $OPTION in
h) _help ;;
v) version ;;
b) backup ;;
r) restore ;;
s) services ;;
*)
logger -t $TAG -s "Incorrect option."
_help
;;
esac

