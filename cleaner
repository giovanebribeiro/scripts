#!/bin/sh
##
# File: cleaner
# Author: Giovane Boaviagem <giovanebribeiro@gmail.com> (Based on Renan Tomal Fernandes' script)
# Description: Functions for cleaning
# Since: 21/02/2013
#
#  This file is free software: you may copy, redistribute and/or modify it  
#  under the terms of the GNU General Public License as published by the  
#  Free Software Foundation, either version 2 of the License, or (at your  
#  option) any later version.  
#  
#  This file is distributed in the hope that it will be useful, but  
#  WITHOUT ANY WARRANTY; without even the implied warranty of  
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  
#  General Public License for more details.  
#  
#  You should have received a copy of the GNU General Public License  
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
##

filename="cleaner"
DATETAG=$(date +%d-%m-%Y)

##
# clean_logs()
##
clean_logs(){
	logs_folder="/var/log"
	before=$(du -sh $logs_folder)
	
	find "$logs_folder" | 
		while read line; do
			if [ -f $line ] ; then
				echo '' > $line
			fi
		done

	log "$filename" "**** Log Folder:"
	log "$filename" "** Before: $before"
	log "$filename" "** After: $(du -sh $logs_folder) \n"
}

##
# clean_unnecessary_packages_pacman()
##
clean_unnecessary_packages_pacman(){
	log "$filename" "**** Using pacman to remove unnecessary packages"
	
	_packages=$(pacman -Qdtq)
	
	if [ -n $_packages ] ; then
		pacman -Rns $_packages
		teste=`echo $?`
		if [ teste = "0" ] ; then
			log "$filename" "** $(echo $_packages | wc -l) packages removed($_packages)"
		else
			log "$filename" "** Fail to execute: pacman -Rns $_packages"
			return 1
		fi
	else
		log "$filename" "** No unnecessary packages found"
	fi	
}

##
# clean_pacman_cache()
##
clean_pacman_cache(){
	size_before=$(du -sh /var/cache/pacman/pkg/)
	number_files_before=$(ls /var/cache/pacman/pkg | wc -l)

    pacman -Sc --noconfirm >/dev/null 2>&1

    if [ ! $? == 0 ]; then
        log "$filename" "** Error to execute: pacman -Sc --noconfirm"
        return 1
    fi

	log "$filename" "**** Pacman Cache"
    log "$filename" "** Before:"
    log "$filename" "	- Size: $size_before" 
    log "$filename" "	- Number of files: $number_files_before"   
    log "$filename" "** After:"
    log "$filename" "	- Tamanho: $(du -sh /var/cache/pacman/pkg/)"
    log "$filename" "	- Number of files: $(ls /var/cache/pacman/pkg | wc -l) \n"
}

##
# clean_backups_and_temp_files()
# @param $1 Flag to be a interative process (1), or not (!=1).
##
clean_backups_and_temp_files(){
	INTERACTIVE=$1

    find / -iname "*~" -o -iname "*.bak" -o -iname "*.tmp" > /tmp/bkp_log
    temp="0"

    for i in $(seq 1 $(cat /tmp/bkp_log | wc -l )); do
        line=$(cat /tmp/bkp_log | head -n $i | tail -n 1)
        if [ "$INTERACTIVE" == "1" ]; then
            if [ -f "$line" ]; then
                question "Remover arquivo $line?"
            else
                question "Remover diretorio $line?"
            fi

            if [ $question == 1 ]; then
                rm -rf "$line"
                temp=$(expr $count + 1)
            fi
        else
            rm -rf "$line"
            temp=$(expr $count + 1)
        fi
    done

    rm /tmp/bkp_log

	log "$filename" "**** Backups and temp files:"
    log "$filename" "** Files removed: $temp"
}
