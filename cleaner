#!/bin/bash

##
# File: toolbox
# Author: Giovane Boaviagem <giovanebribeiro@gmail.com># 
# Since: 21/02/2013
#
#  This file is free software: you may copy, redistribute and/or modify it  
#  under the terms of the GNU General Public License as published by the  
#  Free Software Foundation, either version 2 of the License, or (at your  
#  option) any later version.  
#  
#  This file is distributed in the hope that it will be useful, but  
#  WITHOUT ANY WARRANTY; without even the implied warranty of  
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  
#  General Public License for more details.  
#  
#  You should have received a copy of the GNU General Public License  
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
##

LOGTAG="CLEANER_GIOZ"

log(){
	logger -t $LOGTAG -s "$1"
}

##
# question()
##
question(){
    printf "\e[1;33m?? \e[1;37m$1 \e[1;30m[\e[1;32mS\e[1;30m/\e[1;31mN\e[1;30m]:\e[m "
    read out

    case "$out" in
        's' | 'S' )
            resp=1
            ;;
        * )
            resp=0
            ;;
    esac

    if [ "x$2" == "xecho" ]; then
        echo $resp
    else
        question=$resp
    fi

    return 0
}

##
# clean_logs()
##
clean_logs(){
	log "*** Cleaning the /var/log folder..."
	logs_folder="/var/log"
	before=$(du -sh $logs_folder)
	
	find "$logs_folder" | 
		while read line; do
			if [ -f $line ] ; then
				echo '' > $line
			fi
		done

	log "**** Log Folder:"
	log "** Before: $before"
	log "** After: $(du -sh $logs_folder) \n"
}

##
# clean_unnecessary_packages_pacman()
##
clean_unnecessary_packages_pacman(){
	log "**** Using pacman to remove unnecessary packages\n"
	
	_packages=$(pacman -Qdtq)
	
	if [ -n $_packages ] ; then
		pacman -Rns $_packages
		teste=`echo $?`
		if [ $teste == "0" ] ; then
			log "** $(echo $_packages | wc -l) packages removed($_packages)\n"
		else
			log "** Fail to execute: pacman -Rns $_packages\n"
			return 1
		fi
	else
		log "** No unnecessary packages found\n"
	fi	
}

##
# clean_pacman_cache()
##
clean_pacman_cache(){
	log "*** Cleaning the pacman's cache..."
	size_before=$(du -sh /var/cache/pacman/pkg/)
	number_files_before=$(ls /var/cache/pacman/pkg | wc -l)

    pacman -Sc --noconfirm >/dev/null 2>&1

    if [ ! $? == 0 ]; then
        log "** Error to execute: pacman -Sc --noconfirm\n"
        return 1
    fi

	log "**** Pacman Cache"
    log "** Before:"
    log "	- Size: $size_before" 
    log "	- Number of files: $number_files_before"   
    log "** After:"
    log "	- Tamanho: $(du -sh /var/cache/pacman/pkg/)"
    log "	- Number of files: $(ls /var/cache/pacman/pkg | wc -l) \n"
}

##
# clean_backups_and_temp_files()
# @param $1 Flag to be a interative process (1), or not (!=1).
##
clean_backups_and_temp_files(){
	log "*** Cleaning the backups and temp files..."
	INTERACTIVE=$1

    find / -iname "*~" -o -iname "*.bak" -o -iname "*.tmp" > /tmp/bkp_log
    temp="0"

    for i in $(seq 1 $(cat /tmp/bkp_log | wc -l )); do
        line=$(cat /tmp/bkp_log | head -n $i | tail -n 1)
        if [ "$INTERACTIVE" == "1" ]; then
            if [ -f "$line" ]; then
                question "Remover arquivo $line?"
            else
                question "Remover diretorio $line?"
            fi

            if [ $question == 1 ]; then
                rm -rf "$line"
                temp=$(expr $count + 1)
            fi
        else
            rm -rf "$line"
            temp=$(expr $count + 1)
        fi
    done

    rm /tmp/bkp_log

	log "**** Backups and temp files:"
    log "** Files removed: $temp\n"
}

usage(){
	echo "syntax: $0 OPTION"
	echo "	OPTION"
	echo "		--tmp_files:		Clean all the .bkp and temp files"
	echo "		--logs:			Clean the files of /var/log folder"
	echo "		--cache_pacman:		Clean the pacman's cache"
	echo "		--pkg_old_pacman:	Clean the unnecessary packages of pacman"
	echo "		--simple:		Executes all procedures, except the last one"
	echo "		--deep:			Executes all procedures above"

	echo ""
}

if [ ! "$(whoami)" == "root" ] ; then
	echo "This script must be executed like root"
	exit
fi

case "$1" in
	--simple)
		clean_backups_and_temp_files "0"
		clean_logs		
		clean_pacman_cache		
		;;
	--deep)
		clean_backups_and_temp_files "0"
		clean_logs		
		clean_pacman_cache
		clean_unnecessary_packages_pacman		
		;;
	--tmp_files)
		clean_backups_and_temp_files "1"
		;;
	--logs)
		clean_logs
		;;
	--cache_pacman)
		clean_pacman_cache
		;;
	--pkg_old_pacman)
		clean_unnecessary_packages_pacman
		;;
	*)
		usage
		;;
esac

echo "Cleaning complete. See log for details."
